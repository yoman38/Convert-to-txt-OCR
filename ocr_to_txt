#Install poppler for your operating system.
#Add the poppler binary directory to your system's PATH variable.
#For Windows:
#Download the latest Poppler's Windows release from here. https://github.com/oschwartz10612/poppler-windows/releases/tag/v23.08.0-0
#Extract the downloaded archive.
#Add the bin directory from the extracted archive to your system's PATH.

#pip install PyPDF2 Pillow pytesseract pdf2image python-docx openpyxl python-pptx

import os
import shutil
from PyPDF2 import PdfReader
from PIL import Image
import pytesseract
from pdf2image import convert_from_path
from docx import Document
from pptx import Presentation
import openpyxl
import logging

# Constants
TESSERACT_CMD_PATH = r'C:\Users\gbray\AppData\Local\Programs\Tesseract-OCR\tesseract.exe'
INPUT_FOLDER = "C:\\Users\\gbray\\Documents\\gpt4-pdf-chatbot-langchain-main\\PasteDocsHere"
OUTPUT_FOLDER = "C:\\Users\\gbray\\Documents\\gpt4-pdf-chatbot-langchain-main\\docs"
LOGGING_FORMAT = "%(asctime)s — %(levelname)s — %(message)s"

# Set the tesseract command path
pytesseract.pytesseract.tesseract_cmd = TESSERACT_CMD_PATH

# Configure logging
logging.basicConfig(level=logging.INFO, format=LOGGING_FORMAT)

def has_selectable_text(pdf_path):
    """Check if the PDF has selectable text and return the text if present."""
    text_content = []
    try:
        with open(pdf_path, 'rb') as f:
            reader = PdfReader(f)
            for page in reader.pages:
                text_content.append(page.extract_text())
    except Exception as e:
        logging.error(f"Error reading PDF {pdf_path}: {e}")
    return '\n'.join(text_content).strip()

def ocr_image(image_path):
    """Perform OCR on the image and return the extracted text."""
    try:
        image = Image.open(image_path)
        return pytesseract.image_to_string(image, lang='fra')
    except Exception as e:
        logging.error(f"Error performing OCR on image {image_path}: {e}")
        return ""

def ocr_pdf(pdf_path):
    """Convert PDF to images and then perform OCR on those images."""
    text_content = []
    try:
        poppler_path = r"C:\Users\gbray\appdata\local\anaconda3\lib\site-packages\poppler-23.08.0\Library\bin"
        images = convert_from_path(pdf_path, poppler_path=poppler_path)
        for image in images:
            text_content.append(pytesseract.image_to_string(image, lang='fra'))
    except Exception as e:
        logging.error(f"Error performing OCR on PDF {pdf_path}: {e}")
    return '\n'.join(text_content).strip()

def extract_excel_text(excel_path):
    """Extract text from an Excel file."""
    text_content = []
    try:
        workbook = openpyxl.load_workbook(excel_path)
        for sheet in workbook:
            for row in sheet.iter_rows():
                text_content.append('    '.join(str(cell.value) if cell.value else '' for cell in row))
    except Exception as e:
        logging.error(f"Error reading Excel {excel_path}: {e}")
    return '\n'.join(text_content).strip()

def extract_docx_text(docx_path):
    """Extract text from a DOCX file."""
    text_content = []
    try:
        doc = Document(docx_path)
        for para in doc.paragraphs:
            text_content.append(para.text)
    except Exception as e:
        logging.error(f"Error reading DOCX {docx_path}: {e}")
    return '\n'.join(text_content).strip()

def write_text_to_file(text_content, output_txt_path):
    """Writes the extracted text to a .txt file."""
    with open(output_txt_path, 'w', encoding='utf-8') as f:
        f.write(text_content)

def process_document(file_path, folderok_path):
    """Process the document and move/select the appropriate action based on file type."""
    file_ext = os.path.splitext(file_path)[1].lower()
    output_txt_path = os.path.join(folderok_path, os.path.splitext(os.path.basename(file_path))[0] + ".txt")

    if file_ext == '.pdf':
        text_content = has_selectable_text(file_path) or ocr_pdf(file_path)
    elif file_ext == '.txt':
        shutil.move(file_path, os.path.join(folderok_path, os.path.basename(file_path)))
        return
    elif file_ext in ['.jpg', '.jpeg', '.png']:
        text_content = ocr_image(file_path)
    elif file_ext == '.docx':
        text_content = extract_docx_text(file_path)
    elif file_ext in ['.xlsx', '.xls', '.xlsm']:
        text_content = extract_excel_text(file_path)
    elif file_ext == '.pptx':
        text_content = extract_pptx_text(file_path)
    else:
        logging.warning(f"Unsupported file extension {file_ext} for file {file_path}. Skipping...")
        return

    write_text_to_file(text_content, output_txt_path)

if __name__ == '__main__':
    for doc in os.listdir(INPUT_FOLDER):
        process_document(os.path.join(INPUT_FOLDER, doc), OUTPUT_FOLDER)

